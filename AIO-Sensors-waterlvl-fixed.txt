#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <OneWire.h>
#include <DallasTemperature.h>
#include <WiFi.h>
#include <WiFiClient.h>
#include <BlynkSimpleEsp32.h>



#define ONE_WIRE_BUS 12
#define WATER_LEVEL_PIN 32
#define PH_SENSOR_PIN 34
#define RelayPin11 33
#define TRIGGER_PIN 14
#define ECHO_PIN 27
#define ULTRASONIC_THRESHOLD 10
#define TdsSensorPin 35
#define VREF 5.0
#define SCOUNT 10
#define RESET_BUTTON V7


#define LCD_ADDRESS 0x27
#define LCD_COLUMNS 20
#define LCD_ROWS 4

LiquidCrystal_I2C lcd(LCD_ADDRESS, LCD_COLUMNS, LCD_ROWS);


String waterLevelMessage;
String ultrasonicMessage = "Error";


int analogBuffer[SCOUNT];
int analogBufferTemp[SCOUNT];
int analogBufferIndex = 0;
int copyIndex = 0;





float averageVoltage = 0;
float tdsValue = 0;
float temperature = 25;
float distance;

unsigned long duration;
unsigned long interval = 1000l;


bool pumpState = false;
bool pumpButtonPressed = false;


WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP);
BlynkTimer timer;
File dataFile;

//ph sensor variables
float calibration_value = 20.24 - 0.7;
int phval = 0;
unsigned long int avgval;
int buffer_arr[10], temp;
float ph_act;

int lowThreshold = 500;   // set low threshold to 500
int highThreshold = 800;  // set high threshold to 800

OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);

char auth[] = "XxmY84Iaue1hQijl2xZqZqfrf7wj01_c";
char ssid[] = "HUAWEI-5e4V";
char pass[] = "manginasal123";


bool manualRelayState = false;
int lowNutrientThreshold = 600;

float get_pH_value() {
  for (int i = 0; i < 10; i++) {
    buffer_arr[i] = analogRead(PH_SENSOR_PIN);
    delay(30);
  }

  for (int i = 0; i < 9; i++) {
    for (int j = i + 1; j < 10; j++) {
      if (buffer_arr[i] > buffer_arr[j]) {
        temp = buffer_arr[i];
        buffer_arr[i] = buffer_arr[j];
        buffer_arr[j] = temp;
      }
    }
  }

  avgval = 0;
  for (int i = 2; i < 8; i++)
    avgval += buffer_arr[i];

  float volt = (float)avgval * 3.3 / 4096.0 / 6;
  ph_act = -5.30 * volt + calibration_value;

  return ph_act;
}

void read_and_send_pH() {
  float ph_act = get_pH_value();
  lcd.setCursor(0, 0);
  lcd.print(ph_act);
  Serial.print("pH Val: ");
  Serial.println(ph_act);
  Blynk.virtualWrite(V4, ph_act);
}

float getTemperature() {
  sensors.requestTemperatures();
  float temperature = sensors.getTempCByIndex(0);
  Serial.print("Temperature: ");
  Serial.println(temperature);
  lcd.setCursor(0, 1);
  lcd.print("Temp: ");
  lcd.print(temperature);
  Blynk.virtualWrite(V0, temperature);
  return temperature;
}

void waterLevelControl() {
  int waterLevel = analogRead(WATER_LEVEL_PIN);

  if (waterLevel < lowThreshold) {
    waterLevelMessage = "Low";
    digitalWrite(RelayPin11, HIGH);
    pumpState = true;
  } else if (waterLevel >= lowThreshold && waterLevel < highThreshold) {
    waterLevelMessage = "High";
    digitalWrite(RelayPin11, LOW);
    pumpState = false;
  } else {
    waterLevelMessage = "High";
    digitalWrite(RelayPin11, LOW);
    pumpState = false;
  }

  lcd.setCursor(0, 2);
  lcd.print("Water Level: ");
  lcd.print(waterLevelMessage);

  Serial.print("Water Level: ");
  Serial.println(waterLevelMessage);

  Blynk.virtualWrite(V1, waterLevelMessage);
  Blynk.virtualWrite(V2, pumpState);
}
float getMedianNum(int* bArray, int iFilterLen) {
  int bTab[iFilterLen];
  for (byte i = 0; i < iFilterLen; i++)
    bTab[i] = bArray[i];
  int i, j, bTemp;
  for (j = 0; j < iFilterLen - 1; j++) {
    for (i = 0; i < iFilterLen - j - 1; i++) {
      if (bTab[i] > bTab[i + 1]) {
        bTemp = bTab[i];
        bTab[i] = bTab[i + 1];
        bTab[i + 1] = bTemp;
      }
    }
  }
  if ((iFilterLen & 1) > 0)
    return bTab[iFilterLen / 2];
  else
    return (bTab[iFilterLen / 2] + bTab[iFilterLen / 2 - 1]) / 2;
}

void checkTDS() {
  static unsigned long analogSampleTimepoint = millis();
  if (millis() - analogSampleTimepoint > 40U) {  //every 40 milliseconds,read the analog value from the ADC
    analogSampleTimepoint = millis();
    analogBuffer[analogBufferIndex] = analogRead(TdsSensorPin);  //read the analog value and store into the buffer
    analogBufferIndex++;
    if (analogBufferIndex == SCOUNT) {
      analogBufferIndex = 0;
    }
  }

  static unsigned long printTimepoint = millis();
  if (millis() - printTimepoint > 800U) {
    printTimepoint = millis();
    for (copyIndex = 0; copyIndex < SCOUNT; copyIndex++) {
      analogBufferTemp[copyIndex] = analogBuffer[copyIndex];

      // hardcode to diko alam kung bat kailangan 4v
      averageVoltage = getMedianNum(analogBufferTemp, SCOUNT) * (float)VREF / 4096.0;


      float compensationCoefficient = 1.0 + 0.02 * (temperature - 25.0);
      //temperature compensation
      float compensationVoltage = averageVoltage / compensationCoefficient;

      //convert voltage value to tds value
      tdsValue = (133.42 * compensationVoltage * compensationVoltage * compensationVoltage - 255.86 * compensationVoltage * compensationVoltage + 857.39 * compensationVoltage) * 0.5;
      lcd.setCursor(0, 3);
      lcd.print("TDS Value: ");
      Serial.print("TDS Value:");
      Serial.print(tdsValue, 0);
      Serial.println("ppm");
      Blynk.virtualWrite(V3, tdsValue);
    }
  }

  if (tdsValue < lowNutrientThreshold && !pumpState) {

    digitalWrite(RelayPin11, HIGH);
    pumpState = true;
    delay(4000);
  } else if (tdsValue >= lowNutrientThreshold && pumpState) {

    digitalWrite(RelayPin11, LOW);
    pumpState = false;
  }
}



void checkWaterLevel() {
  digitalWrite(TRIGGER_PIN, LOW);
  delayMicroseconds(2000);
  digitalWrite(TRIGGER_PIN, HIGH);
  delayMicroseconds(2000);
  digitalWrite(TRIGGER_PIN, LOW);
  duration = pulseInLong(ECHO_PIN, HIGH);
  distance = (duration / 2) / 29.1;

  if (distance > 0 && distance <= 7) {
    ultrasonicMessage = "High";
  } else if (distance > 7 && distance <= 14) {
    ultrasonicMessage = "Medium";
  } else if (distance > 15 && distance <= 21) {
    ultrasonicMessage = "Low";
  } else if (distance > 22) {
    ultrasonicMessage = "Empty";
  }

  lcd.setCursor(2, 0);
  lcd.println("Ultrasonic Sensor: " + ultrasonicMessage);
  Serial.println("Ultrasonic Sensor: " + ultrasonicMessage);
  Blynk.virtualWrite(V5, ultrasonicMessage);
}


BLYNK_WRITE(V5) {

  if (param.asInt() == 1) {
    digitalWrite(RelayPin11, HIGH);
    manualRelayState = true;
    pumpButtonPressed = true;
  } else {
    digitalWrite(RelayPin11, LOW);
    manualRelayState = false;
    pumpButtonPressed = false;
  }
}


BLYNK_WRITE(V6) {
  int buttonState = param.asInt();
  if (buttonState == 1 && !pumpState) {
    pumpButtonPressed = true;
  }
}

void resetGlobalVariables() {
  read_and_send_pH();
  getTemperature();
  waterLevelControl();
  checkTDS();
  checkWaterLevel();
}

BLYNK_WRITE(RESET_BUTTON) {
  if (param.asInt() == 1) {
    resetGlobalVariables();
    ESP.restart();
  }
}


void setup() {
  Serial.begin(9600);
  pinMode(RelayPin11, OUTPUT);
  pinMode(TdsSensorPin, INPUT);
  digitalWrite(RelayPin11, LOW);
  sensors.begin();
  Blynk.virtualWrite(RESET_BUTTON, 0);
  Blynk.syncVirtual(RESET_BUTTON);
  WiFi.begin(ssid, pass);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Blynk.begin(auth, ssid, pass);
  Serial.println("Connected to Blynk.");

  pinMode(TRIGGER_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);

  // Set up periodic tasks

  timer.setInterval(interval, read_and_send_pH);
  timer.setInterval(interval, getTemperature);
  timer.setInterval(interval, waterLevelControl);
  timer.setInterval(interval, checkTDS);
  timer.setInterval(interval, checkWaterLevel);
}

void loop() {
  Blynk.run();
  timer.run();
}
